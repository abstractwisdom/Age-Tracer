from netCDF4 import Dataset
import numpy as np

dataset = Dataset('traj.nc','r')




def ncdump(nc_fid, verb=True):
    '''
        from http://schubert.atmos.colostate.edu/~cslocum/netcdf_example.html
        ncdump outputs dimensions, variables and their attribute information.
        The information is similar to that of NCAR's ncdump utility.
        ncdump requires a valid instance of Dataset.
        
        Parameters
        ----------
        nc_fid : netCDF4.Dataset
        A netCDF4 dateset object
        verb : Boolean
        whether or not nc_attrs, nc_dims, and nc_vars are printed
        
        Returns
        -------
        nc_attrs : list
        A Python list of the NetCDF file global attributes
        nc_dims : list
        A Python list of the NetCDF file dimensions
        nc_vars : list
        A Python list of the NetCDF file variables
        '''
    def print_ncattr(key):
        """
            Prints the NetCDF file attributes for a given key
            
            Parameters
            ----------
            key : unicode
            a valid netCDF4.Dataset.variables key
            """
        try:
            print "\t\ttype:", repr(nc_fid.variables[key].dtype)
            for ncattr in nc_fid.variables[key].ncattrs():
                print '\t\t%s:' % ncattr,\
                    repr(nc_fid.variables[key].getncattr(ncattr))
        except KeyError:
            print "\t\tWARNING: %s does not contain variable attributes" % key
    # NetCDF global attributes
    nc_attrs = nc_fid.ncattrs()
    if verb:
        print "NetCDF Global Attributes:"
        for nc_attr in nc_attrs:
            print '\t%s:' % nc_attr, repr(nc_fid.getncattr(nc_attr))
    nc_dims = [dim for dim in nc_fid.dimensions]  # list of nc dimensions
        # Dimension shape information.
    if verb:
        print "NetCDF dimension information:"
        for dim in nc_dims:
            print "\tName:", dim
            print "\t\tsize:", len(nc_fid.dimensions[dim])
            print_ncattr(dim)
    # Variable information.
    nc_vars = [var for var in nc_fid.variables]  # list of nc variables
    if verb:
        print "NetCDF variable information:"
        for var in nc_vars:
            if var not in nc_dims:
                print '\tName:', var
                print "\t\tdimensions:", nc_fid.variables[var].dimensions
                print "\t\tsize:", nc_fid.variables[var].size
                print_ncattr(var)
    return nc_attrs, nc_dims, nc_vars

ncdump(dataset,verb=True)


#fundamentals of netcdf data storage: http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#//004600000003000000

lats = dataset.variables['jpos'][:]
lons = dataset.variables['ipos'][:]
height = dataset.variables['kpos'][:]

#for each particle, use list comprehension to extract

nparts = len(dataset.dimensions['nps'])
time = dataset['time'][:]

particle_data = list()
for particle in range(0,nparts-1):
    tempdict={"lats":[y[particle] for y in lats],"lons":[y[particle] for y in lons],"height":[y[particle] for y in height]}
    particle_data.append(tempdict)

# def extractparticledata(particle_number)
#
#   
#exit()





# prints out all height below a level.
if height.all >-30:
	list_of_lists1 = [[height,lons,lats]]
	print list_of_lists1 


import  csv

with open("spawntest.csv","w") as f:     
     wr = csv.writer(f,delimiter=" ")     
     wr.writerows(list_of_lists1)







# Setting up spawn file
#
#   
#


import  csv

p = range(1,50) #number of particles
l = -6.536887   #latitude 
#numpy.arange(-5, -6, 0.0005) code use later
la = 59.244806  #Longitude
#numpy.arange(58, 59, 0.0005) code use later
d = 00.0000     #Depth
da = 2015/10/01 #Date
list_of_lists = [[p[0],l,la,d,da]]

with open("spawntest.csv","w") as f:     
     wr = csv.writer(f,delimiter=" ")     
     wr.writerows(list_of_lists)
     wr.writerows('\n')

counter = 0
while counter <= 50:
     p[0] = p[0] + 1
     while d <= 50:
          d = d + 1 
          with open("spawntest.csv","w") as f:   
               wr = csv.writer(f,delimiter=" ")     
               wr.writerows(list_of_lists)
               wr.writerows('\n')
          counter = counter + 1
